filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
zeros <- which(near(comp1$avg_resp - omp2$avg_resp, 0))
if (length(comp1$avg_resp[-zeros]) < 2) {print('Differences are 0')}
wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
faces_wilcox <- function(time1, group1, time2, group2, survey) {
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
if (length(comp1$avg_resp[-zeros]) < 2) {print('Differences are 0')}
wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
faces_wilcox <- function(time1, group1, time2, group2, survey) {
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
if (length(comp1$avg_resp[-zeros]) < 2) {
print('Differences are 0')
} else {
wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
faces_wilcox('Pre', 'Experimental', 'Pre', 'Control', 'FACES')
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
print('Differences are 0')
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox)) -> x
group_comparison
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
comp1$avg_resp - comp2$avg_resp
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox)) -> x
x$test[[1]]
x$test[1]
bind_rows(comp1, comp2)
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
bind_rows(comp1, comp2)
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox)) -> x
x$test[1]
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
faces_
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox)) -> x
x$test[1]
faces_wilcox('Pre', 'Experimental', 'Pre', 'Control', 'FACES')
faces_wilcox('Pre', 'Experimental', 'Pre', 'Control', 'FACES')
group_comparison
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox)) -> x
x
x$test[1]
faces_wilcox('Pre', 'Experimental', 'Pre', 'Control', 'FACES')
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
zeros
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
faces_wilcox('Pre', 'Experimental', 'Pre', 'Control', 'FACES')
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
print('Differences are 0')
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
faces_wilcox('Pre', 'Control', 'Post', 'Control', 'FACES')
faces_wilcox('Pre', 'Experiment', 'Post', 'Experiment', 'FACES')
faces_
faces
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
# print('Differences are 0')
faces_
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2) {
# print('Differences are 0')
list(faces_, comp1, comp2)
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
x <- faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
x
x[[3]]
x[[3]]$avg_resp
x[[2]]$avg_resp
x[[3]]$avg_resp
x[[2]]$avg_resp - x[[3]]$avg_resp
near(x[[2]]$avg_resp - x[[3]]$avg_resp, 0)
which(near(x[[2]]$avg_resp - x[[3]]$avg_resp, 0))
x[[2]]$avg_resp[-which(near(x[[2]]$avg_resp - x[[3]]$avg_resp, 0))]
x[[2]]$avg_resp
which(near(x[[2]]$avg_resp - x[[3]]$avg_resp, 0))
x[[2]]$avg_resp[-which(near(x[[2]]$avg_resp - x[[3]]$avg_resp, 0))]
length[-which(near(x[[2]]$avg_resp - x[[3]]$avg_resp, 0))]
length(which(near(x[[2]]$avg_resp - x[[3]]$avg_resp, 0))
)
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2  & length(zeros) > 0) {
print('Differences are 0')
list(faces_, comp1, comp2)
} else {
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
}
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
faces_wilcox
wilcox.test
x
x <- faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
x
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
5
faces_wilcox('Pre', 'Experimental', 'Post', 'Experimental', 'FACES')
x <- faces_wilcox('Pre', 'Experimental', 'Pre', 'Control', 'FACES')
faces_wilcox('Pre', 'Experimental', 'Pre', 'Control', 'FACES')
group_comparison %>%
slice(1) %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
group_comparison %>%
slice(1)
group_comparison %>%
slice(1) %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
faces_wilcox(time1 = 'Pre', group1 = 'Experimental', time2 = 'Pre', group2 = 'Control', survey ='FACES')
group_comparison %>%
slice(1) %>%
mutate(test = pwalk(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
group_comparison <- bind_rows(first_comp, secnd_comp) %>% mutate_all(as.character)
time_comparison <- bind_rows(third_comp, forth_comp) %>% mutate_all(as.character)
time_comparison
group_comparison %>%
slice(1) %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
group_comparison %>%
slice(1) %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox)) -> x
x$test[[1]]
group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
time_wilcoxon  <- time_comparison %>%
mutate(test = pmap(list(time1 = Time.x, group1 = Group, time2 = Time.y, group2 = Group, survey = Survey)))
time_wilcoxon  <- time_comparison %>%
mutate(test = pmap(list(time1 = Time.x, group1 = Group, time2 = Time.y, group2 = Group, survey = Survey),
faces_wilcox))
time_wilcoxon
group_wilcoxon <- group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox))
group_wilcoxon$test[[1]]
group_wilcoxon$test[[1]]$p.value
group_wilcoxon$test
group_wilcoxon <- group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox),
p.value = unlist(map(test, function(x) `$`(`[`(`[`(x)), 'p.value'))))
group_wilcoxon
group_wilcoxon$test[[1]]$statistic
time_wilcoxon  <- time_comparison %>%
mutate(test = pmap(list(time1 = Time.x, group1 = Group, time2 = Time.y, group2 = Group, survey = Survey),
faces_wilcox),
p.value = p.value = unlist(map(test, function(x) `$`(`[`(`[`(x)), 'p.value'))))
time_wilcoxon  <- time_comparison %>%
mutate(test = pmap(list(time1 = Time.x, group1 = Group, time2 = Time.y, group2 = Group, survey = Survey),
faces_wilcox),
p.value = unlist(map(test, function(x) `$`(`[`(`[`(x)), 'p.value'))))
time_wilcoxon
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
# check for differences that are near 0.
zeros <- which(near(comp1_spl_resp - comp2$avg_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1_spl_resp[-zeros]) < 2  && length(zeros) > 0) {
print('Differences are 0')
list(filted_data = faces_, comp_df1 = comp1, comp_df2 = comp2, zeros = zeros)
}
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
# check for differences that are near 0.
zeros <- which(near(comp1$avg_resp - comp2_spl_resp, 0))
# if too many zeors, then we can't compare using wilcoxon test
if (length(comp1$avg_resp[-zeros]) < 2  && length(zeros) > 0) {
print('Differences are 0')
list(filted_data = faces_, comp_df1 = comp1, comp_df2 = comp2, zeros = zeros)
}
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
group_wilcoxon <- group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox),
p.value = unlist(map(test, function(x) `$`(`[`(`[`(x)), 'p.value'))))
time_wilcoxon  <- time_comparison %>%
mutate(test = pmap(list(time1 = Time.x, group1 = Group, time2 = Time.y, group2 = Group, survey = Survey),
faces_wilcox),
p.value = unlist(map(test, function(x) `$`(`[`(`[`(x)), 'p.value'))))
knitr::kable(group_wilcoxon)
faces_wilcox <- function(time1, group1, time2, group2, survey) {
# Filter to data we need for comparison
faces_ <- faces %>%
filter(Time %in% c(time1, time2) & Group %in% c(group1, group2))
# Create 2 datasets
comp1 <- faces_ %>%
filter(Time == time1, Group == group1, Survey == survey)
comp2 <- faces_ %>%
filter(Time == time2, Group == group2, Survey == survey)
# 3 Cases need to be handled:
# 1. If the lengths are unequal. Sample longer sample to obtain equal comparison
if (length(comp1$avg_resp) > length(comp2$avg_resp)) {
comp1_spl_resp <- sample(comp1$avg_resp, replace = T, size = length(comp2$avg_resp))
wilcox.test(comp1_spl_resp, comp2$avg_resp)
# Second case for unequal lengths
} else if (length(comp1$avg_resp) < length(comp2$avg_resp)) {
comp2_spl_resp <- sample(comp2$avg_resp, replace = T, size = length(comp1$avg_resp))
wilcox.test(comp1$avg_resp, comp2_spl_resp)
# if they are equal, then run comparison.
} else wilcox.test(comp1$avg_resp, comp2$avg_resp)
}
group_wilcoxon <- group_comparison %>%
mutate(test = pmap(list(time1 = Time, group1 = Group.x, time2 = Time, group2 = Group.y, survey = Survey),
faces_wilcox),
p.value = unlist(map(test, function(x) `$`(`[`(`[`(x)), 'p.value'))))
time_wilcoxon  <- time_comparison %>%
mutate(test = pmap(list(time1 = Time.x, group1 = Group, time2 = Time.y, group2 = Group, survey = Survey),
faces_wilcox),
p.value = unlist(map(test, function(x) `$`(`[`(`[`(x)), 'p.value'))))
group_wilcoxon
time_wilcoxon
group_wilcoxon
group_wilcoxon$test[[1]]
group_wilcoxon$test[[1]]$data.name
group_wilcoxon$test[[1]]$method
group_wilcoxon$test[[1]]$null.value
group_wilcoxon$test[[1]]$statistic
knitr::kable(select(group_wilcoxon, -test))
knitr::kable(select(group_wilcoxon, -test) %>%
arrange(desc(p.value)))
knitr::kable(select(time_wilcoxon, -test) %>%
arrange(desc(p.value)))
knitr::kable(select(time_wilcoxon, -test) %>%
group_by(Survey) %>%
arrange(desc(p.value)))
library(tidytext)
knitr::opts_chunk$set(echo = TRUE)
## Libraries
library(tidyverse)
library(purrr)
## Loading data:
faces <- read_csv('../Data/cleaned_FACES_data.csv',
col_types = c('ffffdf'))
knitr::kable(select(time_wilcoxon, -test) %>%
group_by(Survey) %>%
arrange(Survey, desc(p.value)))
